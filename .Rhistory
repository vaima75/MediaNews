# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 300)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb, i, title=paste( round(i/length(nylist)*100),
"% done"),label = iny)
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 300)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb, i, title=paste( round(i/length(nylist)*100),
"% done"),label = iny)
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 300)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb, i, title=paste( round(i/length(nylist)*100),
"% done"),label = iny)
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 300)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb = pb, value = i, title=paste( round(i/length(nylist)*100),
"% done"))
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 300)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb = pb, value = i,
title = paste( round(i/length(nylist)*100),
"% done"),label = length(nylist))
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 300)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb = pb, value = i,
title = paste( round(i/length(nylist)*100),
"% done"),label = length(nylist))
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 300)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb = pb, value = i,
title = paste( round(i/length(nylist)*100),
"% done"),label = length(nylist))
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 300)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb = pb, value = i,
title = paste( round(i/length(nylist)*100),
"% done"),label = length(nylist))
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 300)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb = pb, value = i,
title = paste( round(i/length(nylist)*100),
"% done"),label = length(nylist))
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 100)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb = pb, value = i,
title = paste( round(i/length(nylist)*100),
"% done"),label = length(nylist))
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
# colnames(xxx) = "new"
# #or
# aaa = data.frame(matrix(unlist(cxz)))
# colnames(aaa) = "new"
#
#
# # new
# qaz = list(c('a','b','c'), c('d','e','f'), c('g','h','i'))
# zzz = data.frame(t(t(qaz)))
# colnames(zzz) = "new"
{
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 250)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb = pb, value = i,
title = paste( round(i/length(nylist)*100),
"% done"),label = length(nylist))
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
}
# colnames(xxx) = "new"
# #or
# aaa = data.frame(matrix(unlist(cxz)))
# colnames(aaa) = "new"
#
#
# # new
# qaz = list(c('a','b','c'), c('d','e','f'), c('g','h','i'))
# zzz = data.frame(t(t(qaz)))
# colnames(zzz) = "new"
{
nylist = c("a","b","c","d","e","f","g","h","i","j")
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(nylist), width = 250)
for (iny in nylist) {
i <- which(iny == nylist, arr.ind = T)
message('sdsdsd')
# message(paste0(round(i / length(nylist)*100), '% completed'))
setWinProgressBar(pb = pb, value = i,
title = paste( round(i/length(nylist)*100),
"% done"),label = length(nylist))
# width <- options()$width
# message(paste0(rep('=', i / length(nylist) * width), collapse = ''), appendLF =TRUE)
Sys.sleep(.1)
if (i == length(nylist)){message('Extration Done'); close(pb)}
else message('\014')
}
}
gob = TOI_News_Articles("trp scam")
View(caa)
gob = TOI_News_Articles("scam")
View(gob)
gob = TOI_News_Articles("scam")
gob = TOI_News_Articles("scam")
gob = TOI_News_Articles("scam")
View(gob)
View(gob)
save(emoji_Data, file = "data/emoji_Data.rda")
library(tidyr)
emoji_fullList = read_html("https://unicode.org/emoji/charts/full-emoji-list.html")
emoji_DataList = html_table(emoji_fullList)
emoji_D = emoji_DataList[[1]]
emoji_D = emoji_D[-c(1)]
topic = c("Code","face-smiling",
"face-affection",
"face-tongue",
"face-hand",
"face-neutral-skeptical",
"face-sleepy",
"face-unwell",
"face-hat",
"face-glasses",
"face-concerned",
"face-negative",
"face-costume",
"cat-face",
"monkey-face",
"emotion",
"People & Body",
"hand-fingers-open",
"hand-fingers-partial",
"hand-single-finger",
"hand-fingers-closed",
"hands",
"hand-prop",
"body-parts",
"person",
"person-gesture",
"person-role",
"person-fantasy",
"person-activity",
"person-sport",
"person-resting",
"family",
"person-symbol",
"Component",
"hair-style",
"Animals & Nature",
"animal-mammal",
"animal-bird",
"animal-amphibian",
"animal-reptile",
"animal-marine",
"animal-bug",
"plant-flower",
"plant-other",
"Food & Drink",
"food-fruit",
"food-vegetable",
"food-prepared",
"food-asian",
"food-marine",
"food-sweet",
"drink",
"dishware",
"Travel & Places",
"place-map",
"place-geographic",
"place-building",
"place-religious",
"place-other",
"transport-ground",
"transport-water",
"transport-air",
"hotel",
"time",
"sky & weather",
"Activities",
"event",
"award-medal",
"sport",
"game",
"arts & crafts",
"Objects",
"clothing",
"sound",
"music",
"musical-instrument",
"phone",
"computer",
"light & video",
"book-paper",
"money",
"mail",
"writing",
"office",
"lock",
"tool",
"science",
"medical",
"household",
"other-object",
"Symbols",
"transport-sign",
"warning",
"arrow",
"religion",
"zodiac",
"av-symbol",
"gender",
"math",
"punctuation",
"currency",
"other-symbol",
"keycap",
"alphanum",
"geometric",
"Flags",
"flag",
"country-flag",
"subdivision-flag")
palt = c("Code","Browser","Appl","Goog","FB","Wind","Twtr","Joy","Sams","Gmail","SB","DCM","KDDI","Description")
trowx = c()
for (t in topic) {
rowx = which(t == emoji_D[1])
trowx = append(trowx, rowx)
}
emoji_D = emoji_D[-trowx,]
colnames(emoji_D) = palt
rownames(emoji_D) <- NULL
### Determine Maximum no of unicodes
# tcolx = c()
# for (i in 1:nrow(emoji_D)) {
#   colx = str_count(emoji_D[i,1],pattern = "\\s+")
#   tcolx = append(tcolx, colx)
# }
### Altenative
# sapply(emoji_D$Code, function(x){
#   colx = str_count(x,pattern = "\\s+")
# })
emoji_D = separate(emoji_D, col = Code,
into = c("C1","C2","C3","C4","C5","C6","C7","C8"),
sep = "\\s+")
for (x in 1:8) emoji_D[,x] = gsub(pattern = "(U\\+[0-9A-Fa-f]{4,8})", replacement = "<\\1>", x = emoji_D[,x])
write_csv(emoji_Data, "data-raw/emoji_Data.csv")
save(emoji_Data, file = "data/emoji_Data.rda")
library(rvest)
library(tidyr)
emoji_fullList = read_html("https://unicode.org/emoji/charts/full-emoji-list.html")
emoji_DataList = html_table(emoji_fullList)
emoji_D = emoji_DataList[[1]]
emoji_D = emoji_D[-c(1)]
topic = c("Code","face-smiling",
"face-affection",
"face-tongue",
"face-hand",
"face-neutral-skeptical",
"face-sleepy",
"face-unwell",
"face-hat",
"face-glasses",
"face-concerned",
"face-negative",
"face-costume",
"cat-face",
"monkey-face",
"emotion",
"People & Body",
"hand-fingers-open",
"hand-fingers-partial",
"hand-single-finger",
"hand-fingers-closed",
"hands",
"hand-prop",
"body-parts",
"person",
"person-gesture",
"person-role",
"person-fantasy",
"person-activity",
"person-sport",
"person-resting",
"family",
"person-symbol",
"Component",
"hair-style",
"Animals & Nature",
"animal-mammal",
"animal-bird",
"animal-amphibian",
"animal-reptile",
"animal-marine",
"animal-bug",
"plant-flower",
"plant-other",
"Food & Drink",
"food-fruit",
"food-vegetable",
"food-prepared",
"food-asian",
"food-marine",
"food-sweet",
"drink",
"dishware",
"Travel & Places",
"place-map",
"place-geographic",
"place-building",
"place-religious",
"place-other",
"transport-ground",
"transport-water",
"transport-air",
"hotel",
"time",
"sky & weather",
"Activities",
"event",
"award-medal",
"sport",
"game",
"arts & crafts",
"Objects",
"clothing",
"sound",
"music",
"musical-instrument",
"phone",
"computer",
"light & video",
"book-paper",
"money",
"mail",
"writing",
"office",
"lock",
"tool",
"science",
"medical",
"household",
"other-object",
"Symbols",
"transport-sign",
"warning",
"arrow",
"religion",
"zodiac",
"av-symbol",
"gender",
"math",
"punctuation",
"currency",
"other-symbol",
"keycap",
"alphanum",
"geometric",
"Flags",
"flag",
"country-flag",
"subdivision-flag")
palt = c("Code","Browser","Appl","Goog","FB","Wind","Twtr","Joy","Sams","Gmail","SB","DCM","KDDI","Description")
trowx = c()
for (t in topic) {
rowx = which(t == emoji_D[1])
trowx = append(trowx, rowx)
}
emoji_D = emoji_D[-trowx,]
colnames(emoji_D) = palt
rownames(emoji_D) <- NULL
### Determine Maximum no of unicodes
# tcolx = c()
# for (i in 1:nrow(emoji_D)) {
#   colx = str_count(emoji_D[i,1],pattern = "\\s+")
#   tcolx = append(tcolx, colx)
# }
### Altenative
# sapply(emoji_D$Code, function(x){
#   colx = str_count(x,pattern = "\\s+")
# })
emoji_D = separate(emoji_D, col = Code,
into = c("C1","C2","C3","C4","C5","C6","C7","C8"),
sep = "\\s+")
for (x in 1:8) emoji_D[,x] = gsub(pattern = "(U\\+[0-9A-Fa-f]{4,8})", replacement = "<\\1>", x = emoji_D[,x])
write_csv(emoji_D, "data-raw/emoji_Data.csv")
save(emoji_D, file = "data/emoji_Data.rda")
write.csv(emoji_D, "data-raw/emoji_Data.csv")
write.csv(emoji_D, "data-raw/emoji_Data.csv",row.names = F)
usethis::use_travis()
usethis::use_github()
usethis::use_git()
library(MediaNews)
emoji_Data
